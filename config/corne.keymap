/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define XXX &none         // no physical keys
#define KNA &none         // key not applicable / unused

// Macros
#define AS(keycode) &as LS(keycode) keycode   // Autoshift
#define TS(keycode) &ts keycode keycode       // togglestick

// Windows Clipboard shortcuts
#define M_RDO  &kp LC(Y)
#define M_PST  &kp LC(V)
#define M_CPY  &kp LC(C)
#define M_CUT  &kp LC(X)
#define M_UDO  &kp LC(Z)

// Layer definition
#define BASE   0
#define NAV    1
#define NUM    2
#define SYM    3
#define BLU    4
//#define U_MOUSE  5
//#define U_MEDIA  6
//#define U_NUM    7
//#define U_SYM    8
//#define U_FUN    9

/ {
    combos {
        compatible = "zmk,combos";
        combo_esc  {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
        };
        combo_bspc {
            timeout-ms = <50>;
            key-positions = <4 5>;
            bindings = <&kp BSPC>;
        };
        combo_del  {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp DEL>;
        };
        combo_sysrstL {
            timeout-ms = <50>;
            key-positions = <1 5>;
            bindings = <&sys_reset>;
        };
        combo_sysrstR {
            timeout-ms = <50>;
            key-positions = <6 10>;
            bindings = <&sys_reset>;
        };
    };
};

/ {
     behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        }; 
        ew: esc_cword {
            compatible = "zmk,behavior-hold-tap";
            label = "esc_cword";
            #binding-cells = <2>;
            tapping_term_ms = <150>;
            flavor = "tap-preferred";
            bindings = <&caps_word>, <&kp>;
        };
        ts: toggle_stick {
            compatible = "zmk,behavior-hold-tap";
            label = "togglestick";
            #binding-cells = <2>;
            tapping_term_ms = <150>;
            flavor = "tap-preferred";
            bindings = <&sk>, <&kt>;
        };
     };

     keymap {
                compatible = "zmk,keymap";

                base_layer {

                        label = "Base";
                        bindings = <

XXX   AS(Q)             AS(W)             AS(F)             AS(P)             AS(B)       /**/  AS(J)             AS(L)             AS(U)             AS(Y)             AS(SQT)        XXX  
XXX   AS(A)             AS(R)             AS(S)             AS(T)             AS(G)       /**/  AS(M)             AS(N)             AS(E)             AS(I)             AS(O)          XXX  
XXX   AS(X)             AS(C)             AS(D)             AS(V)             AS(Z)       /**/  AS(K)             AS(H)             &mt BSLH COMMA    &mt FSLH DOT      &mt EXCL QMARK XXX  
                                          &ew 0 ESC         &lt NAV SPACE     &lt SYM TAB /**/  &lt NUM RET       &kp BSPC          &tog NAV
 
                        >;
                };

                nav_layer {

                        label = "Nav";
                        bindings = <

XXX   KNA               KNA              KNA                KNA               &kp DEL     /**/  M_CUT             &kp PG_UP         &kp UP            &kp PG_DN         TS(LCTRL)      XXX  
XXX   KNA               KNA              KNA                KNA               M_PST       /**/  M_CPY             &kp LEFT          &kp DOWN          &kp RIGHT         TS(LSHFT)      XXX  
XXX   KNA               KNA              KNA                KNA               M_RDO       /**/  M_UDO             &kp HOME          KNA               &kp END           &sk LALT       XXX  
                                         KNA                KNA               KNA         /**/  &lt NUM RET       &kp BSPC          &tog NAV

                        >;
                };

                num_layer {

                        label = "Num";
                        bindings = <

XXX   &mt TILDE CARET   AS(N7)           AS(N8)             AS(N9)            AS(N0)      /**/  &mt ASTRK PLUS    &mt UNDER MINUS   &mt RBRC LBRC     KNA               KNA            XXX  
XXX   &mt PRCNT PIPE    AS(N4)           AS(N5)             AS(N6)            AS(DOT)     /**/  &mt BSLH FSLH     &mt EXCL EQUAL    &mt RPAR LPAR     KNA               KNA            XXX  
XXX   &mt HASH AMPS     AS(N1)           AS(N2)             AS(N3)            AS(COMMA)   /**/  &mt PIPE AMPS     &mt GT LT         &mt RBKT LBKT     KNA               KNA            XXX  
                                         KNA                &lt NAV SPACE     KNA         /**/  KNA               &kp DEL           KNA   
                        
                        >;
                };

                sym_layer {

                        label = "Sym";
                        bindings = <

XXX   &mt GRAVE TILDE   &mt N7 CARET     &mt N8 FSLH        &mt N9 ASTRK      &mt N0 AT         &mt ASTRK PLUS    &mt UNDER MINUS   &mt RBRC LBRC     KNA               KNA            XXX  
XXX   &mt PRCNT PIPE    &mt N4 COMMA     &mt N5 SEMI        &mt N6 COLON      &mt DLLR QMARK    &mt BSLH FSLH     &mt EXCL EQUAL    &mt RPAR LPAR     KNA               KNA            XXX  
XXX   &mt HASH AMPS     &mt N1 DOT       &mt N2 LT          &mt N3 GT         &mt SQT DQT /**/  &mt PIPE AMPS     &mt GT LT         &mt RBKT LBKT     KNA               KNA            XXX  
                                         KNA                &lt NAV SPACE     KNA         /**/  KNA               &kp DEL           KNA                           

                        >;
                };

                blu_layer {

                        label = "Blu";
                        bindings = <
                        
XXX   &kp F1            &kp F2           &kp F3             &kp F4            &kp F5      /**/  &kp F6            &kp F7            &kp F8            &kp F9            &kp F10        XXX  
XXX   &bt BT_SEL 0      &bt BT_SEL 1     &bt BT_SEL 2       &bt BT_SEL 3      &bt BT_SEL 4      KNA               KNA               KNA               &kp F11           &kp F12        XXX  
XXX   &ext_power EP_TOG KNA              KNA                KNA               KNA         /**/  KNA               KNA               KNA               KNA               KNA            XXX  
                                         &bt BT_CLR         KNA               &bt BT_NXT  /**/  &bt BT_PRV        KNA               KNA   

                        >;
                };

        };
};
