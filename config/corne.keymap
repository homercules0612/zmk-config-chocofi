/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

// Autoshift Macro
#define AS(keycode) &as LS(keycode) keycode

// Windows Clipboard shortcuts
#define M_RDO  &kp LC(Y)
#define M_PST  &kp LC(V)
#define M_CPY  &kp LC(C)
#define M_CUT  &kp LC(X)
#define M_UDO  &kp LC(Z)

// Layer definition
#define BASE   0
#define NAV    1
//#define NUM    2
//#define SYM    3
//#define BLU    4
//#define U_MOUSE  5
//#define U_MEDIA  6
//#define U_NUM    7
//#define U_SYM    8
//#define U_FUN    9

/ {
     behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <135>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        }; 
        ew: esc_cword {
          compatible = "zmk,behavior-hold-tap";
          label = "esc_cword";
          #binding-cells = <2>;
          tapping_term_ms = <135>;
          flavor = "tap-preferred";
          bindings = <&caps_word>, <&kp>;
        };
     };

     keymap {
                compatible = "zmk,keymap";

                base_layer {

                        label = "Base";
                        bindings = <

&none AS(Q)             AS(W)             AS(F)             AS(P)             AS(B)       /**/  AS(J)             AS(L)             AS(U)             AS(Y)             AS(SQT)        &none
&none AS(A)             AS(R)             AS(S)             AS(T)             AS(G)       /**/  AS(M)             AS(N)             AS(E)             AS(I)             AS(O)          &none
&none AS(X)             AS(C)             AS(D)             AS(V)             AS(Z)       /**/  AS(K)             AS(H)             &mt BSLH COMMA    &mt FSLH DOT      &mt EXCL QMARK &none
//                                        &ew 0 ESC         &lt NAV SPACE     &lt SYM TAB /**/  &lt NUM RET       &kp BSPC          &tog NAV
                                          &ew 0 ESC         &trans            &trans      /**/  &trans            &kp BSPC          &tog NAV
                        >;
                };

                nav_layer{

                        label = "Nav";
                        bindings = <

&none &trans            &trans           &trans             &trans            &kp DEL     /**/  M_CUT             &kp PG_UP         &kp UP            &kp PG_DN         &trans         &none
&none &trans            &trans           &trans             &trans            M_PST       /**/  M_CPY             &kp LEFT          &kp DOWN          &kp RIGHT         &trans         &none
&none &trans            &trans           &trans             &trans            M_RDO       /**/  M_UDO             &kp HOME          &trans            &kp END           &trans         &none
//                                       &trans             &trans            &trans      /**/  &mo BLU           &trans            &tog NAV
                                         &trans             &trans            &trans      /**/  &trans            &trans            &tog NAV

                        >;
                };

//                num_layer {
//
//                        label = "Num";
//                        bindings = <
//
//&none &mt TILDE CARET   &kp N7           &kp N8             &kp N9            &kp N0      /**/  &mt ASTRK PLUS    &mt UNDER MINUS   &mt RBRC LBRC     &trans            &trans         &none
//&none &mt PRCNT PIPE    &kp N4           &kp N5             &kp N6            &kp DOT     /**/  &mt BSLH FSLH     &mt EXCL EQUAL    &mt RPAR LPAR     &trans            &trans         &none
//&none &mt HASH AMPS     &kp N1           &kp N2             &kp N3            &kp COMMA   /**/  &mt PIPE AMPS     &mt GT LT         &mt RBKT LBKT     &trans            &trans         &none
//                                         &trans             &lt NAV SPACE     &trans      /**/  &trans            &kp DEL           &trans
//                        
//                        >;
//                };
//
//                sym_layer {
//
//                        label = "Sym";
//                        bindings = <
//
//&none &mt GRAVE TILDE   &mt KP_N7 CARET  &mt KP_N8 FSLH     &mt KP_N9 ASTRK   &mt KP_N0 AT/**/  &mt ASTRK PLUS    &mt UNDER MINUS   &mt RBRC LBRC     &trans            &trans         &none
//&none &mt PRCNT PIPE    &mt KP_N4 COMMA  &mt KP_N5 SEMI     &mt KP_N6 COLON   &mt DLLR QMARK    &mt BSLH FSLH     &mt EXCL EQUAL    &mt RPAR LPAR     &trans            &trans         &none
//&none &mt HASH AMPS     &mt KP_N1 DOT    &mt KP_N2 LT       &mt KP_N3 GT      &kp SQT DQT /**/  &mt PIPE AMPS     &mt GT LT         &mt RBKT LBKT     &trans            &trans         &none
//                                         &trans             &lt NAV SPACE     &trans      /**/  &trans            &kp DEL           &trans
//                        
//                        >;
//                };
//
//                blu_layer {
//
//                        label = "Blu";
//                        bindings = <
//                        
//&none &kp F1            &kp F2           &kp F3             &kp F4            &kp F5      /**/  &kp F6            &kp F7            &kp F8            &kp F9            &kp F10        &none
//&none &bt BT_SEL 0      &bt BT_SEL 1     &bt BT_SEL 2       &bt BT_SEL 3      &bt BT_SEL 4/**/  &trans            &trans            &trans            &kp F11           &kp F12        &none
//&none &ext_power EP_TOG &trans           &trans             &trans            &trans      /**/  &trans            &trans            &trans            &trans            &trans         &none
//                                         &bt BT_CLR         &trans            &bt BT_NXT  /**/  &bt BT_PRV        &trans            &trans
//                        >;
//                };

        };
};
